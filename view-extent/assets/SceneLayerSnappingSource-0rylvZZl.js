import{a4 as w,fT as C,ej as y,l as k,v as o,w as n,z as f,ek as H,bm as E,h$ as x,em as _,ix as $,b1 as I,ba as O}from"./index-HvZUpAiV.js";import{h as L}from"./WorkerHandle-DvtwOnUf.js";import{t as h}from"./workerHelper-CdGOo_fq.js";import{f as V}from"./edgeProcessing-D6kkgv2G.js";import{V as A}from"./sphere-DFCqiClV.js";import{b as v,r as R}from"./SketchOptions-BCFrY3ky.js";import{c as D}from"./RouteLayerInteraction-BGbSAk8h.js";import{r as P}from"./VertexSnappingCandidate-D034Y9Vw.js";import"./InterleavedLayout-MsmgK_rD.js";import"./BufferView-bq7L8kVa.js";import"./deduplicate-CoqyDpyd.js";import"./Indices-p2DC-8DK.js";import"./VertexAttribute-Cq4MnHjR.js";import"./glUtil-BCTOiZkJ.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./Normals-Dhk3K_EF.js";import"./mat3f64-q3fE-ZOt.js";import"./plane-BVS6atMq.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./geodesicUtils-C93orGFR.js";import"./projectVectorToVector-BCxdzR8G.js";import"./projectPointToVector-C1iiDdYZ.js";import"./quantityUtils-CkGXr1AE.js";import"./GraphicsLayer-CJh6KSfA.js";import"./RouteLayerView2D-CRO0_qJI.js";import"./LayerView-DxpYE98A.js";import"./Container-C_Kq1KIA.js";import"./GraphicContainer-CtkqudBK.js";import"./AGraphicContainer-XAyEf6Hp.js";import"./TechniqueInstance-LmzY8NVQ.js";import"./UpdateTracking2D-D0nTT2Mu.js";import"./dataViewUtils-DAtkXtzs.js";import"./BoundingBox-DCULi5_d.js";import"./FramebufferObject-DWpknOee.js";import"./VertexArrayObject-uoJ0-Wyy.js";import"./memoryEstimations-37nmr0XF.js";import"./TileContainer-CX6XEddH.js";import"./WGLContainer-CwrJPf2u.js";import"./ProgramTemplate-BfiyU3Gv.js";import"./vec3f32-nZdmKIgz.js";import"./config-BY8iCNT-.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-ByHk-OL2.js";import"./OptimizedFeatureSet-gaSfjeKA.js";import"./OptimizedGeometry-Cumf0C0a.js";import"./FeatureCommandQueue-BF6Kyd6u.js";import"./CIMSymbolHelper-C8RwZNuh.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-CX2ZFjAl.js";import"./Rect-CnxqbxT-.js";import"./rasterizingUtils-C-5soeya.js";import"./floatRGBA-BYWqjqxI.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-B4iOu8M5.js";import"./ShaderBuilder-CTv5PIaf.js";import"./BindType-BBwFZqyN.js";import"./QueueProcessor-Bz8c6zwC.js";import"./GraphicsView2D-CCuVzbF4.js";import"./OverrideHelper-Dao22xbu.js";import"./quantizationUtils-DhCYdMlR.js";import"./FeatureMetadata-0sLTa5oK.js";import"./queryUtils-CcuXnom0.js";import"./json-Wa8cmqdu.js";import"./timeSupport-gzdwZJS5.js";import"./TimeOnly-sFiiDQtg.js";import"./dehydratedFeatures-n0WNkcKi.js";import"./PointSnappingHint-DrylikJE.js";class j extends L{constructor(t){super("EdgeProcessingWorker","extract",{extract:r=>[r.dataBuffer],extractComponentsEdgeLocations:r=>[r.dataBuffer],extractEdgeLocations:r=>[r.dataBuffer]},t)}async process(t,r,i){return i?V(t):B(await this.invoke(new g(t),r))}async extractEdgeLocations(t,r){const i=await this.invokeMethod("extractEdgeLocations",new g(t),r);return h(i)}async extractComponentsEdgeLocations(t,r){const i=await this.invokeMethod("extractComponentsEdgeLocations",new g(t),r);return h(i)}}function B(e){return{regular:{instancesData:h(e.regular.instancesData),lodInfo:{lengths:new Float32Array(e.regular.lodInfo.lengths)}},silhouette:{instancesData:h(e.silhouette.instancesData),lodInfo:{lengths:new Float32Array(e.silhouette.lodInfo.lengths)}},averageEdgeLength:e.averageEdgeLength}}class g{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=w(t.indices)?t.indices.buffer:t.indices,this.indicesType=w(t.indices)?C(t.indices)?"Uint32Array":"Uint16Array":"Array",this.indicesLength=t.indicesLength}}let d=class extends y{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new W(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,s=z;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,s);const l=e.distance,c=typeof l=="number"?l:l.distance,u=await this._workerHandle.invoke({bounds:A(s[0],s[1],s[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return u.candidates.sort((m,b)=>m.distance-b.distance),u.candidates.map(m=>this._convertCandidate(r,m))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new D({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new P({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=k();return this.renderCoordsHelper.fromRenderCoords(t,r,e),R(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:s,uid:l}of e.components)this._ids.has(s)&&r.push((async()=>{const c=await this.fetchEdgeLocations(s,t.signal),u=c.locations.buffer;return i.push(u),{id:s,uid:l,objectIds:c.objectIds,locations:u,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:s})=>this._ids.has(s))},transferList:i}}};o([n({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),o([n({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),o([n({constructOnly:!0})],d.prototype,"schedule",void 0),o([n({readOnly:!0})],d.prototype,"availability",void 0),d=o([f("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let W=class extends L{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const z=k();let a=class extends y{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new H,this._abortController=new AbortController}destroy(){this._tracker=E(this._tracker),this._abortController=x(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new j(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,i)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,i)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||$(e)||(this._tracker=t.trackSnappingSources({add:(i,s)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:i,bounds:s},e))},remove:i=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:i},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}o([n({constructOnly:!0})],a.prototype,"getLayerView",void 0),o([n({constructOnly:!0})],a.prototype,"view",void 0),o([n({readOnly:!0})],a.prototype,"updating",null),o([n({readOnly:!0})],a.prototype,"availability",void 0),a=o([f("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let p=class extends y{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(i=>i.fetchCandidates(e,t)));return I(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(O)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};o([n({constructOnly:!0})],p.prototype,"layerSource",void 0),o([n({constructOnly:!0})],p.prototype,"view",void 0),o([n({readOnly:!0})],p.prototype,"updating",null),o([n({readOnly:!0})],p.prototype,"availability",void 0),p=o([f("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],p);export{p as SceneLayerSnappingSource};
