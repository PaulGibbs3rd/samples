import{v as r,hN as G,hO as E,hP as J,dq as X,c$ as Y,cZ as j,hF as Z,cO as V,hG as tt,hH as et,hI as st,hJ as ot,d1 as it,h4 as rt,hK as at,be as nt,hQ as pt,hR as q}from"./index-HvZUpAiV.js";import{r as dt}from"./vec3f32-nZdmKIgz.js";import{n as ht}from"./WGLContainer-CwrJPf2u.js";import{o as lt}from"./FeatureCommandQueue-BF6Kyd6u.js";import{t as L}from"./utils-ehcGqGxa.js";import{j as ct,_ as P,p as ut,X as ft,C as x,Y as vt,a as mt,w as yt,h as U,g as n,r as wt,U as xt,m as B,b as gt,P as W,v as _t,t as Mt}from"./GraphShaderModule-B4iOu8M5.js";import{e as St}from"./TechniqueType-uMFRS8dR.js";import{t as N}from"./VertexElementDescriptor-BLyltQyJ.js";class I extends gt{}r([U(0,x)],I.prototype,"pos",void 0),r([U(1,x)],I.prototype,"uv",void 0);class $t extends _t{}class F extends W{}r([n(wt)],F.prototype,"dvs",void 0);class m extends W{}r([n(x)],m.prototype,"perspective",void 0),r([n(x)],m.prototype,"texSize",void 0),r([n(P)],m.prototype,"wrapAroundShift",void 0),r([n(P)],m.prototype,"opacity",void 0),r([n(xt)],m.prototype,"texture",void 0);class w extends ct{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ut(t,this.config.perspective)),o=new ft(e.pos.add(new x(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(i.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}r([n(F)],w.prototype,"transform",void 0),r([n(m)],w.prototype,"config",void 0),r([G(0,B(I))],w.prototype,"vertex",null),r([G(0,B($t))],w.prototype,"fragment",null);class bt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...L,stencil:{write:!1,test:{compare:J.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){X(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new N("pos",2,j.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new N("uv",2,j.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:Y.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class zt extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=Z(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==V.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const g=q(c),d=i*o[0],v=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=p*d,b=p*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(d/2,v/2)),rt(a,a,dt(d/$,-v/b,1)),at(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=s,f=this._localOrigin;let g,d=0;const v=nt(i);if(v&&i.isWrappable){const y=c[0],S=c[1],_=q(o),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[C,T]=v.valid,h=pt(i),{x:z,y:K}=u.targetGeometry,H=[z,K],O=[0,0];s.toScreen(O,H);const M=[0,0];let R;R=a>p?.5*p:.5*a;const D=Math.floor((z+.5*h)/h),Q=C+D*h,k=T+D*h,A=[O[0]+R,0];s.toMap(M,A),M[0]>k&&(d=h),A[0]=O[0]-R,s.toMap(M,A),M[0]<Q&&(d=-h),g={worldWidth:h,xBounds:[C,T]}}for(const y of t)y.updateDrawCoords(f,d,i,g)}}export{zt as u};
