import{b1 as p,aj as m,F as s}from"./index-HvZUpAiV.js";import{p as n}from"./MeshVertexAttributes-Dkg4q_nU.js";import{B as a}from"./vertexSpaceConversion-DS4q0pnV.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-gk3RTZGb.js";import"./computeTranslationToOriginAndRotation-DS1RA0a6.js";import"./projectPointToVector-C1iiDdYZ.js";import"./meshVertexSpaceUtils-DX6vJSOr.js";import"./MeshLocalVertexSpace-D4pJWxLS.js";import"./vec3-DHZhVtM8.js";import"./BufferView-bq7L8kVa.js";import"./vec4-B6JyCAZ4.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
