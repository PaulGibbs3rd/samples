const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/disjointOperator-DwNmnFRt.js","assets/ProjectionTransformation-ConR_osk.js","assets/SimpleGeometryCursor-B92kdZ15.js","assets/index-HvZUpAiV.js","assets/index-CknZVD3U.css","assets/jsonConverter-DzhIYcGL.js","assets/intersectsOperator-BZyjBnYa.js","assets/OperatorIntersects-Cj_vtiWK.js","assets/touchesOperator-BHmWGZ60.js","assets/OperatorTouches-CIp-asHy.js","assets/crossesOperator-CHsNW9mG.js","assets/OperatorCrosses-7v1CejA7.js","assets/withinOperator-C5h111xk.js","assets/OperatorWithin-CiU7OSRZ.js","assets/containsOperator-DTU_2dDe.js","assets/overlapsOperator-DZxVV9uY.js","assets/OperatorOverlaps-BC2PfEjN.js","assets/OperatorGeodeticLength-Bo6UjJxH.js","assets/SceneLayerWorker-UYo0FucA.js","assets/MeshLocalVertexSpace-D4pJWxLS.js","assets/vec3-DHZhVtM8.js","assets/projectVectorToVector-BCxdzR8G.js","assets/projectPointToVector-C1iiDdYZ.js","assets/sphere-DFCqiClV.js","assets/mat3f64-q3fE-ZOt.js","assets/plane-BVS6atMq.js","assets/mat4f64-Dk4dwAN8.js","assets/quatf64-aQ5IuZRd.js","assets/I3SBinaryReader-eTe8pCj5.js","assets/VertexAttribute-Cq4MnHjR.js","assets/edgeUtils-Rha5YVxV.js","assets/floatRGBA-BYWqjqxI.js","assets/NormalAttribute.glsl-BB0pCeSs.js","assets/glsl-BH37Aalp.js","assets/ShaderOutput-DnYY5J1_.js","assets/BindType-BBwFZqyN.js","assets/orientedBoundingBox-neA8kfp8.js","assets/quat-oOomIECn.js","assets/spatialReferenceEllipsoidUtils-gk3RTZGb.js","assets/computeTranslationToOriginAndRotation-DS1RA0a6.js","assets/popupUtils-BeF2ZTBH.js","assets/associatedFeatureServiceUtils-BytauXIA.js","assets/SketchOptions-BCFrY3ky.js","assets/geodesicUtils-C93orGFR.js","assets/quantityUtils-CkGXr1AE.js","assets/utils-DPeAAKnQ.js","assets/quantizationUtils-DhCYdMlR.js","assets/FeatureLayerSource-Bq4FRqJK.js","assets/meshVertexSpaceUtils-DX6vJSOr.js","assets/MeshTransform-D60sEMoL.js","assets/axisAngleDegrees-B6A2L6Qc.js","assets/editingSupport-CjxQvjkp.js","assets/clientSideDefaults-DX_en5ZT.js","assets/QueryEngineCapabilities-B_pTbIiR.js","assets/query-Ck7H_Gwp.js","assets/pbfQueryUtils-D3UKVvA5.js","assets/pbf-mwLoLG45.js","assets/memoryEstimations-37nmr0XF.js","assets/OptimizedGeometry-Cumf0C0a.js","assets/OptimizedFeatureSet-gaSfjeKA.js","assets/executeQueryJSON-CYfIN4Os.js","assets/featureConversionUtils-ByHk-OL2.js","assets/layersCreator-Bd6iu04U.js","assets/loadUtils-DVg0Hb2K.js","assets/fetchService-BXkp93RV.js","assets/lazyLayerLoader-B559UHHi.js","assets/portalLayers-D-XO0_C2.js","assets/saveUtils-Dt9HyKPA.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/ImageryTileLayerView2D-DQJSbXHU.js","assets/RasterVFDisplayObject-CW-tzZw4.js","assets/VertexArrayObject-uoJ0-Wyy.js","assets/VertexElementDescriptor-BLyltQyJ.js","assets/dataUtils-ZxVyVg14.js","assets/WGLContainer-CwrJPf2u.js","assets/dataViewUtils-DAtkXtzs.js","assets/BoundingBox-DCULi5_d.js","assets/ProgramTemplate-BfiyU3Gv.js","assets/vec3f32-nZdmKIgz.js","assets/Container-C_Kq1KIA.js","assets/config-BY8iCNT-.js","assets/earcut-D9gy186-.js","assets/LayerView-DxpYE98A.js","assets/rasterUtils-ClEzkjAD.js","assets/VertexStream-CiskS4CB.js","assets/utils-DTW7hrDn.js","assets/FramebufferObject-DWpknOee.js","assets/TileContainer-CX6XEddH.js","assets/rasterProjectionHelper-DiAoS_Zb.js","assets/timeSupport-CoRxLEWY.js","assets/RefreshableLayerView-B0NjhT76.js","assets/RasterWorker-Ctlq_tqE.js","assets/_commonjsHelpers-DCkdB7M8.js","assets/ElevationLayer-Q2jdXjv8.js","assets/ByteSizeUnit-BsxeN7wM.js","assets/WorkerHandle-DvtwOnUf.js","assets/editingTools-IqGnyNnb.js","assets/interfaces-BZbx386I.js","assets/VerticalOffset.glsl-DuJPIa91.js","assets/Indices-p2DC-8DK.js","assets/InterleavedLayout-MsmgK_rD.js","assets/BufferView-bq7L8kVa.js","assets/triangle-CwVnTGeB.js","assets/lineSegment-qKxmYvue.js","assets/renderState-C2pj_NJg.js","assets/boundedPlane-GSBO2ry_.js","assets/requestImageUtils-BmIulmFl.js","assets/TextureFormat-1mYWTFa-.js","assets/ShaderBuilder-CTv5PIaf.js","assets/triangulationUtils-Bd0RxlX9.js","assets/deduplicate-CoqyDpyd.js","assets/RibbonLine.glsl-DHsFpK_R.js","assets/HUDVisibility.glsl-BzrpovQk.js","assets/doublePrecisionUtils-B0owpBza.js","assets/hydratedFeatures-zybGNFCc.js","assets/Octree-CtgEqypn.js","assets/HUDMaterial.glsl-Bw5Yolut.js","assets/NestedMap-GuqgquCN.js","assets/RouteLayerInteraction-BGbSAk8h.js","assets/GraphicsLayer-CJh6KSfA.js","assets/RouteLayerView2D-CRO0_qJI.js","assets/GraphicContainer-CtkqudBK.js","assets/AGraphicContainer-XAyEf6Hp.js","assets/TechniqueInstance-LmzY8NVQ.js","assets/UpdateTracking2D-D0nTT2Mu.js","assets/FeatureCommandQueue-BF6Kyd6u.js","assets/CIMSymbolHelper-C8RwZNuh.js","assets/BidiEngine-QXap_35O.js","assets/fontUtils-CX2ZFjAl.js","assets/Rect-CnxqbxT-.js","assets/rasterizingUtils-C-5soeya.js","assets/TechniqueType-uMFRS8dR.js","assets/GraphShaderModule-B4iOu8M5.js","assets/QueueProcessor-Bz8c6zwC.js","assets/GraphicsView2D-CCuVzbF4.js","assets/OverrideHelper-Dao22xbu.js","assets/FeatureMetadata-0sLTa5oK.js","assets/queryUtils-CcuXnom0.js","assets/json-Wa8cmqdu.js","assets/timeSupport-gzdwZJS5.js","assets/TimeOnly-sFiiDQtg.js","assets/dehydratedFeatures-n0WNkcKi.js","assets/automaticLengthMeasurementUtils-CztJQQQP.js","assets/memoize-DmxaQ-k8.js","assets/unitFormatUtils-BflOTXQ7.js","assets/geodesicLengthMeasurementUtils-DU3Krk_x.js","assets/geometryEngineBase-B0ZyeKAX.js","assets/hydrated-LxCw8I2H.js","assets/glUtil-BCTOiZkJ.js","assets/automaticAreaMeasurementUtils-CoT1rdbz.js","assets/PointSnappingHint-DrylikJE.js","assets/editPlaneUtils-DtoJigS2.js","assets/ReactiveSet--Ms0nxIF.js","assets/SelectedVertexTooltipInfo-PXBFRU91.js","assets/TranslateTooltipInfo-Ba_4lLnt.js","assets/ExtentScaleTooltipInfo-CpFscqLT.js","assets/GraphicManipulator-BGqtpHDP.js","assets/drapedUtils-B5qAUqPT.js","assets/KMLLayerView2D-BqGv7YM8.js","assets/BitmapTechnique-DNr2s0ox.js","assets/BitmapContainer-DcyxvR2a.js","assets/MaterialPrograms-12nZQ39A.js","assets/webglDeps-CqGOgxwM.js","assets/testSVGPremultipliedAlpha-CmjnqzNy.js","assets/FeatureLayerView2D-mUNuk9ZF.js","assets/AttributeBinsFeatureSet-BWRdljn_.js","assets/AttributeBinsQuery-4hOVMi_9.js","assets/FixedIntervalBinParameters-B-K4lQlX.js","assets/CircularArray-CujHzHWW.js","assets/SDFHelper-Ct_Sm1NI.js","assets/parquet-CngeS3j7.js","assets/knowledgegraph-BZr_DVcK.js","assets/arcade-CdQpX-Ps.js","assets/unitConversion-C0dIpvTn.js","assets/ImmutableArray-BPVd6ESQ.js","assets/shared-CRKIGjc5.js","assets/number-B_WoImVR.js","assets/WhereClause-_QlFWXMc.js","assets/portalUtils-C23sFnx2.js","assets/executeQueryForSnapping-C5Y1l1n4.js","assets/PooledRBush-CiScMPuY.js","assets/optimizedFeatureQueryEngineAdapter-BbhZir16.js","assets/QueryEngine-Coy-OmjN.js","assets/WhereClauseCache-CUoRI57u.js","assets/SnappingCandidate-DGkpYqI6.js","assets/MemorySourceWorker-BiY-dfeI.js","assets/sourceUtils-CLCuHVCW.js","assets/date-Ctp1FiBW.js","assets/MediaLayerView2D-DiZlYX5Z.js","assets/enums-BRzLM11V.js","assets/GridShader-BkOCO2y4.js","assets/PieChartMeshWriter-BAM5PA-E.js","assets/libtess-rJTtky-3.js","assets/utils-DSG3SAOD.js","assets/grouping-CAilQFWr.js","assets/OverlayContainer-D-ey2lXR.js","assets/utils-ehcGqGxa.js","assets/FeaturePipelineWorker-BCij-tiu.js","assets/MeshWriterRegistry-DuOg7gV_.js","assets/operatorGeodeticDensify-CO73TQnF.js","assets/geodeticCurveType-CirnHLSB.js","assets/geojson-442t_co0.js","assets/PointCloudWorker-DqeKkLN9.js","assets/uploadAssets-CemhXYiC.js","assets/meshFeatureAttributes--xcZMgHQ.js","assets/SourceLayerData-DEXwmDE_.js","assets/VideoLayerView2D-COiILVNn.js","assets/webdocSaveUtils-ikued9Zp.js","assets/basemapUtils-TkRYahlU.js","assets/resourceUtils-CueS85LF.js","assets/WFSSourceWorker-DRTN0Hlq.js","assets/WMSLayerView2D-DFXJ5UCI.js","assets/ExportStrategy-RG5P8aQJ.js","assets/operators-BTHIgX0s.js","assets/apiConverter-CeEYlua2.js","assets/operatorGeodesicBuffer-CkIWpFYa.js","assets/operatorBuffer-CkKvFfpS.js","assets/GeometryCleaner-BEJM7I4l-Cl7QY3DG.js","assets/operatorConvexHull-DhhA5KZf.js","assets/operatorIntersection-C8UQNzP7.js","assets/operatorOffset-CatRU3Bm.js","assets/operatorSimplify-CMFsBmiJ.js","assets/operatorUnion-G5bsN5Gg.js","assets/MeshComponent-BAemAMdh.js","assets/meshProperties-C4iW0Ukm.js","assets/MeshVertexAttributes-Dkg4q_nU.js","assets/vec4-B6JyCAZ4.js","assets/loader-Ko8dE7kw.js","assets/objectResourceUtils-Sx4Om06U.js","assets/RealisticTree.glsl-BhhxdI4Y.js","assets/vertexSpaceConversion-DS4q0pnV.js","assets/featureLayerUtils-CBBsrEvK.js","assets/intersectionOperator-Dp-Yys8v.js","assets/unionOperator-DZrXUL8S.js","assets/lengthOperator-BkyDNrnD.js","assets/bufferOperator-C8Z8y0pv.js","assets/geodesicBufferOperator-oyd8vnwA.js","assets/offsetOperator-DKkpqISK.js","assets/simplifyOperator-DNAGBzvl.js","assets/convexHullOperator-TzogifCC.js"])))=>i.map(i=>d[i]);
import{b2 as a,c7 as c}from"./index-HvZUpAiV.js";function _(t,e){let o;return{loaded:!1,load:()=>o??(o=e().then(n=>{p[t]={loaded:!0,execute:n}}))}}function s(t){return t==null?null:t.toJSON()}const p={disjoint:_("disjoint",()=>a(()=>import("./disjointOperator-DwNmnFRt.js"),__vite__mapDeps([0,1,2,3,4,5])).then(t=>t.execute)),intersects:_("intersects",()=>a(()=>import("./intersectsOperator-BZyjBnYa.js"),__vite__mapDeps([6,7,1,2,3,4,5])).then(t=>t.execute)),touches:_("touches",()=>a(()=>import("./touchesOperator-BHmWGZ60.js"),__vite__mapDeps([8,9,1,2,3,4,5])).then(t=>t.execute)),crosses:_("crosses",()=>a(()=>import("./crossesOperator-CHsNW9mG.js"),__vite__mapDeps([10,11,1,2,3,4,5])).then(t=>t.execute)),within:_("within",()=>a(()=>import("./withinOperator-C5h111xk.js"),__vite__mapDeps([12,13,1,2,3,4,5])).then(t=>t.execute)),contains:_("contains",()=>a(()=>import("./containsOperator-DTU_2dDe.js"),__vite__mapDeps([14,1,2,3,4,5])).then(t=>t.execute)),overlaps:_("overlaps",()=>a(()=>import("./overlapsOperator-DZxVV9uY.js"),__vite__mapDeps([15,16,1,2,3,4,5])).then(t=>t.execute)),equals:_("equals",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.N),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o))}),relate:_("relate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.a0),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>t.execute(c(e),c(o),n)}),intersection:_("intersection",()=>a(()=>import("./intersectionOperator-Dp-Yys8v.js"),__vite__mapDeps([232,3,4,219,2,1,5])).then(t=>t.execute)),union:_("union",()=>a(()=>import("./unionOperator-DZrXUL8S.js"),__vite__mapDeps([233,222,2,1,3,4,5])).then(t=>t.executeMany)),difference:_("difference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.H),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),symmetricDifference:_("symmetricDifference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.a1),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),clip:_("clip",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.A),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),cut:_("cut",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.E),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o)).map(n=>s(n))}),area:_("area",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(n=>n.y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toAreaUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toAreaUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toAreaUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(c(n));return e(n.spatialReference,o(r),i)}}),geodeticArea:_("geodeticArea",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(r=>r.X),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,squareMeters:o,toAreaUnit:n}=await a(async()=>{const{convert:r,squareMeters:i,toAreaUnit:u}=await import("./unitConversion-C0dIpvTn.js").then(E=>E.e);return{convert:r,squareMeters:i,toAreaUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),length:_("length",async()=>{const t=await a(()=>import("./lengthOperator-BkyDNrnD.js"),__vite__mapDeps([234,3,4,5,1,2])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(n);return e(n.spatialReference,o(r),i)}}),geodeticLength:_("geodeticLength",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(r=>r.Z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-C0dIpvTn.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),distance:_("distance",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(n=>n.J),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>{const u=t.execute(c(n),c(r));return e(n.spatialReference,o(i),u)}}),densify:_("densify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(n=>n.F),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r)))}),geodeticDensify:_("geodeticDensify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(r=>r.Y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-C0dIpvTn.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),s(t.execute(c(r),i)))}),generalize:_("generalize",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(n=>n.Q),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r,u)))}),buffer:_("buffer",async()=>{const t=await a(()=>import("./bufferOperator-C8Z8y0pv.js"),__vite__mapDeps([235,3,4,216,2,1,217,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r))}),geodesicBuffer:_("geodesicBuffer",async()=>{const t=await a(()=>import("./geodesicBufferOperator-oyd8vnwA.js"),__vite__mapDeps([236,3,4,215,2,200])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-C0dIpvTn.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),t.execute(r,i))}),offset:_("offset",async()=>{const t=await a(()=>import("./offsetOperator-DKkpqISK.js"),__vite__mapDeps([237,3,4,220,2,1,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-C0dIpvTn.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r,u))}),rotate:_("rotate",async()=>{const t=await a(()=>import("./operators-BTHIgX0s.js").then(o=>o.Z),__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13])),{default:e}=await a(async()=>{const{default:o}=await import("./operators-BTHIgX0s.js").then(n=>n.Y);return{default:o}},__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13]));return(o,n,r,i)=>{const u=new e().rotate(n,r,i);return s(t.execute(c(o),u))}}),centroid:_("centroid",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),labelPoint:_("labelPoint",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e._),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),simplify:_("simplify",()=>a(()=>import("./simplifyOperator-DNAGBzvl.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.execute)),isSimple:_("isSimple",()=>a(()=>import("./simplifyOperator-DNAGBzvl.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.isSimple)),convexHull:_("convexHull",()=>a(()=>import("./convexHullOperator-TzogifCC.js"),__vite__mapDeps([239,218,2,1,3,4,5])).then(t=>t.execute)),getNearestCoordinate:_("getNearestCoordinate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.$),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>{const r=t.getNearestCoordinate(c(e),c(o),n);return{...r,coordinate:s(r.coordinate)}}}),getNearestVertex:_("getNearestVertex",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Bo6UjJxH.js").then(e=>e.$),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>{const n=t.getNearestVertex(c(e),c(o));return{...n,coordinate:s(n.coordinate)}}})};function d(t,e){const o=p[t];return o.loaded?o.execute.apply(void 0,e):o.load().then(()=>d(t,e))}export{d as invokeGeometryOp};
